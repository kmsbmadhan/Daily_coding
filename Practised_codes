from datetime import datetime
import time


def day_of_the_week(dt):
    '''
    Return a string stating the day of the week corresponding to datetime dt.
    Possible return values are 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
    'Friday', 'Saturday', 'Sunday'.

    Arguments
    dt: the datetime

    Examples
    day_of_the_week(datetime(2019, 9, 6, 11, 33, 0)) returns 'Friday'
    day_of_the_week(datetime(2000, 12, 25, 12, 0, 0)) returns 'Monday'
    '''

    # ====================================
    # Do not change the code before this

    # CODE1: Write code that will store the day of the week string in a variable named str
    str = dt.strftime('%A')

    # ====================================
    # Do not change the code after this

    return str


if __name__ == '__main__':
    print(day_of_the_week(datetime(2019, 9, 6, 11, 33, 0)))
    print(day_of_the_week(datetime(2000, 12, 25, 12, 0, 0)))

import os


def traversal_count(path):
    '''
    Return the number of files traversed when walking the directory tree starting at the given path.
    The returned number should only count files and not directories.

    Arguments
    path: the path to a directory to start the traversal

    Examples (for this host system)
    traversal_count('/opt/yarn/bin/') returns 5
    traversal_count('/usr/share/X11/') returns 191
    '''

    # Store the number of files in the count variable
    count = 0

    # ====================================
    # Do not change the code before this

    # CODE1: Write code that will walk the file system starting
    #        from path and count the number of files with the count variable
    for root, directory, files in os.walk(path):
        count += len(files)

    # ====================================
    # Do not change the code after this

    return count


if __name__ == '__main__':
    print(traversal_count('/opt/yarn/bin/'))
    print(traversal_count('/usr/share/X11/'))


def odds(items):
    '''
    Return a list with only the elements in items at odd indexes.

    Arguments
    items: a list

    Examples
    odds([0,1,2,3,4,5]) returns [1,3,5]
    odds(['Matt','Andy','Tom','Jeremy']) returns ['Andy','Jeremy']
    '''

    # ====================================
    # Do not change the code before this

    # CODE1: Write code that will assign odd_items a list of all elements in items with odd indexes
    odd_items = items[1:][::2]

    # ====================================
    # Do not change the code after this

    return odd_items


if __name__ == '__main__':
    print(odds([0, 1, 2, 3, 4, 5]))
    print(odds(['Matt', 'Andy', 'Tom', 'Jeremy']))




##Function to find second largest number

def second_largest_number(lst):
    largest_num = None
    second_largest = None
    for num in lst:
        if largest_num == None:
            largest_num = num
        elif num > largest_num:
            second_largest = largest_num
            largest_num = num
        elif second_largest == None:
            second_largest = num
        elif num > second_largest:
            second_largest = num
    return second_largest


#Function to find whether two strings are reverse

def are_reverse(str1,str2):
    if str1 == str2[::-1]:
        return True
    return False

#Reverse a single string

def reverse_string(str1):
    return str1[::-1]


 #Compare string numbers


def compare_string_numbers(str1,str2):
    if len(str1) > len(str2):
        return True
    elif len(str1) < len(str2):
        return False
    for i in range(len(str1)):
        if str1[i] == str2[i]:
            continue
        elif str1[i] > str2[i]:
            return True
    return False


# Return sum of diagonal

def sum_of_diagonal(lst):
    count = 0
    for i in range(len(lst)):
        count += lst[i][i]
    return count

#method2
def sum_of_diagonal2(lst):
    count = 0
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            if i == j:
                count += lst[i][i]
    return count

# Return if rooks are safe or not in a chess board

def rooks_safe(lst):
    n = len(lst)

    for row_i in range(n):
        count1 = 0
        for col_j in range(n):
            count1 += lst[row_i][col_j]
        if count1 > 1:
            return False
    for col_i in range(n):
        count2 = 0
        for col_j in range(n):
            count2 += lst[col_i][col_j]
        if count2 > 1:
            return False
    return True



#Count the number of negative integers
#Big O(n)
def count_negative(arr):
    count = 0
    row_i = 0
    col_i = len(arr[0]) - 1
    while col_i >= 0 and row_i < len(arr):
        if arr[col_i][row_i] < 0:
            count += col_i +1
            row_i += 1
        else:
            col_i -= 1
    return count
    #Big O(n^2)
    def count_negative(arr):
    count = 0
    for row_i in arr:
        for ele in row_i:
            if ele < 0:
                count += 1
    return count

def adds_up_10(lst):
    numbers_seen = {}
    for num in lst:
        if (10-num) in numbers_seen:
            return (str(10-num) +', ' + str(num))
        else:
            numbers_seen[num] = 1

    return "Nothing add up to 10"


#Remove duplicates

Runtime: 188 ms, faster than 10.06% of Python3 online submissions for Remove Duplicates from Sorted Array.
Memory Usage: 15.5 MB, less than 5.74% of Python3 online submissions for Remove Duplicates from Sorted Array.

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        for i in range(len(nums)-1,0,-1):
            if nums[i] == nums[i-1]:
                del nums[i]
        return len(nums)


class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) < 2:
            return len(nums)
        i = 1
        j = 0
        while i < len(nums):
            if nums[i] != nums[j]:
                j += 1
                nums[j] = nums[i]
            else:
                i += 1
        return j+1

Runtime: 1460 ms, faster than 5.01% of Python3 online submissions for Remove Duplicates from Sorted Array.
Memory Usage: 15.4 MB, less than 5.74% of Python3 online submissions for Remove Duplicates from Sorted Array.
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:

        stack = []
        tmp = 0

        for i in range(len(nums)):
            if nums[i-tmp] in stack:
                nums.pop(i-tmp)
                tmp += 1
            else:
                stack.append(nums[i-tmp])

        return len(nums)
